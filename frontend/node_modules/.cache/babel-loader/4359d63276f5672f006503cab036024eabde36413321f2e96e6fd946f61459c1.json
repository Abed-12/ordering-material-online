{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nfunction RefrshHandler({\n  setIsAuthenticated\n}) {\n  _s();\n  const location = useLocation(); // بسترجع الموقع الحالي ،مسار الصفحه\n  const navigate = useNavigate(); // للتنقل بين المسارات\n\n  useEffect(() => {\n    // يُستخدم لتنفيذ التأثيرات الجانبية، مثل جلب البيانات أو تحديث الحالة بناءً على تغييرات معينة\n    if (localStorage.getItem('token')) {\n      // في التخزين المحلي token يتحقق اذا كان هناك رمز\n      setIsAuthenticated(true); // اذا وجد رمز يحدث الحاله\n      const storedAuth = JSON.parse(localStorage.getItem(\"auth\"));\n      if (storedAuth && storedAuth.isAuthenticated) {\n        setAuth({\n          isAuthenticated: storedAuth.isAuthenticated,\n          userType: storedAuth.userType\n        });\n      } else {\n        // إعادة تعيين الحالة إذا لم تكن البيانات موجودة\n        setAuth({\n          isAuthenticated: false,\n          userType: null\n        });\n      }\n    }\n  }, [location, navigate, setAuth]); //  يعني أنه سيتم تشغيل هذا التأثير كلما تغيرت أي من هذه القيم\n\n  return null;\n}\n_s(RefrshHandler, \"fPjCxODVr6jVvib6o2c9VLE4s84=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = RefrshHandler;\nexport default RefrshHandler;\nvar _c;\n$RefreshReg$(_c, \"RefrshHandler\");","map":{"version":3,"names":["React","useEffect","useLocation","useNavigate","RefrshHandler","setIsAuthenticated","_s","location","navigate","localStorage","getItem","storedAuth","JSON","parse","isAuthenticated","setAuth","userType","_c","$RefreshReg$"],"sources":["C:/Users/A.A12/Desktop/login-admin/frontend/src/RefrshHandler.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\n\nfunction RefrshHandler({ setIsAuthenticated }) {\n    const location = useLocation(); // بسترجع الموقع الحالي ،مسار الصفحه\n    const navigate = useNavigate(); // للتنقل بين المسارات\n\n\n\n    useEffect(() => { // يُستخدم لتنفيذ التأثيرات الجانبية، مثل جلب البيانات أو تحديث الحالة بناءً على تغييرات معينة\n        if (localStorage.getItem('token')) { // في التخزين المحلي token يتحقق اذا كان هناك رمز\n            setIsAuthenticated(true);            // اذا وجد رمز يحدث الحاله\n            const storedAuth = JSON.parse(localStorage.getItem(\"auth\"));\n            if (storedAuth && storedAuth.isAuthenticated) {\n                setAuth({\n                    isAuthenticated: storedAuth.isAuthenticated,\n                    userType: storedAuth.userType,\n                });\n            } else {\n                // إعادة تعيين الحالة إذا لم تكن البيانات موجودة\n                setAuth({ isAuthenticated: false, userType: null });\n            }\n        }\n    }, [location, navigate, setAuth]) //  يعني أنه سيتم تشغيل هذا التأثير كلما تغيرت أي من هذه القيم\n\n    return (\n        null\n    )\n}\n\nexport default RefrshHandler;\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,SAASC,aAAaA,CAAC;EAAEC;AAAmB,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMM,QAAQ,GAAGL,WAAW,CAAC,CAAC,CAAC,CAAC;;EAIhCF,SAAS,CAAC,MAAM;IAAE;IACd,IAAIQ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MAAE;MACjCL,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAY;MACrC,MAAMM,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MAC3D,IAAIC,UAAU,IAAIA,UAAU,CAACG,eAAe,EAAE;QAC1CC,OAAO,CAAC;UACJD,eAAe,EAAEH,UAAU,CAACG,eAAe;UAC3CE,QAAQ,EAAEL,UAAU,CAACK;QACzB,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACAD,OAAO,CAAC;UAAED,eAAe,EAAE,KAAK;UAAEE,QAAQ,EAAE;QAAK,CAAC,CAAC;MACvD;IACJ;EACJ,CAAC,EAAE,CAACT,QAAQ,EAAEC,QAAQ,EAAEO,OAAO,CAAC,CAAC,EAAC;;EAElC,OACI,IAAI;AAEZ;AAACT,EAAA,CAzBQF,aAAa;EAAA,QACDF,WAAW,EACXC,WAAW;AAAA;AAAAc,EAAA,GAFvBb,aAAa;AA2BtB,eAAeA,aAAa;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}