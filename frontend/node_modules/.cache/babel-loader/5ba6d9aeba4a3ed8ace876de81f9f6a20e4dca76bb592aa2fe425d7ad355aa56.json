{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useEffect } from 'react'\n// import { useLocation, useNavigate } from 'react-router-dom'\n\n// function RefrshHandler({ setIsAuthenticated }) {\n//     const location = useLocation(); // بسترجع الموقع الحالي ،مسار الصفحه\n//     const navigate = useNavigate(); // للتنقل بين المسارات\n\n//     useEffect(() => { // يُستخدم لتنفيذ التأثيرات الجانبية، مثل جلب البيانات أو تحديث الحالة بناءً على تغييرات معينة\n//         if (localStorage.getItem('token')) { // في التخزين المحلي token يتحقق اذا كان هناك رمز\n//             setIsAuthenticated(true); // اذا وجد رمز يحدث الحاله\n//             if (location.pathname === '/' ||\n//                 location.pathname === '/sulogin'\n//             ) { // home انقله على ال login اذا كان المستخدم في الصفحه الئيسيه او\n//                 navigate('/home', { replace: false }); // يسمح للمستخدم بالعودة إلى الصفحة السابقة <-- replace: false \n//             }\n//         }\n//     }, [location, navigate, setIsAuthenticated]) //  يعني أنه سيتم تشغيل هذا التأثير كلما تغيرت أي من هذه القيم\n\n//     return (\n//         null\n//     )\n// }\n\n// export default RefrshHandler;\n\nimport { useEffect } from \"react\";\nconst RefrshHandler = ({\n  setAuth\n}) => {\n  _s();\n  useEffect(() => {\n    // استرجاع بيانات المستخدم من localStorage\n    const storedAuth = JSON.parse(localStorage.getItem(\"auth\"));\n    if (storedAuth && storedAuth.isAuthenticated) {\n      // إذا كانت البيانات موجودة ومصادق عليها، تحديث الحالة\n      setAuth({\n        isAuthenticated: storedAuth.isAuthenticated,\n        userType: storedAuth.userType\n      });\n    } else {\n      // إعادة تعيين الحالة إذا لم تكن البيانات موجودة\n      setAuth({\n        isAuthenticated: false,\n        userType: null\n      });\n    }\n  }, [setAuth]);\n  return null; // هذا المكون لا يحتاج إلى عرض أي شيء\n};\n_s(RefrshHandler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = RefrshHandler;\nexport default RefrshHandler;\nvar _c;\n$RefreshReg$(_c, \"RefrshHandler\");","map":{"version":3,"names":["useEffect","RefrshHandler","setAuth","_s","storedAuth","JSON","parse","localStorage","getItem","isAuthenticated","userType","_c","$RefreshReg$"],"sources":["D:/A.L/مواد جامعة/Project/Project(A)/Code/login-admin/frontend/src/RefrshHandler.js"],"sourcesContent":["// import { useEffect } from 'react'\n// import { useLocation, useNavigate } from 'react-router-dom'\n\n// function RefrshHandler({ setIsAuthenticated }) {\n//     const location = useLocation(); // بسترجع الموقع الحالي ،مسار الصفحه\n//     const navigate = useNavigate(); // للتنقل بين المسارات\n\n//     useEffect(() => { // يُستخدم لتنفيذ التأثيرات الجانبية، مثل جلب البيانات أو تحديث الحالة بناءً على تغييرات معينة\n//         if (localStorage.getItem('token')) { // في التخزين المحلي token يتحقق اذا كان هناك رمز\n//             setIsAuthenticated(true); // اذا وجد رمز يحدث الحاله\n//             if (location.pathname === '/' ||\n//                 location.pathname === '/sulogin'\n//             ) { // home انقله على ال login اذا كان المستخدم في الصفحه الئيسيه او\n//                 navigate('/home', { replace: false }); // يسمح للمستخدم بالعودة إلى الصفحة السابقة <-- replace: false \n//             }\n//         }\n//     }, [location, navigate, setIsAuthenticated]) //  يعني أنه سيتم تشغيل هذا التأثير كلما تغيرت أي من هذه القيم\n\n//     return (\n//         null\n//     )\n// }\n\n// export default RefrshHandler;\n\n\n\nimport { useEffect } from \"react\";\n\nconst RefrshHandler = ({ setAuth }) => {\n  useEffect(() => {\n    // استرجاع بيانات المستخدم من localStorage\n    const storedAuth = JSON.parse(localStorage.getItem(\"auth\"));\n\n    if (storedAuth && storedAuth.isAuthenticated) {\n      // إذا كانت البيانات موجودة ومصادق عليها، تحديث الحالة\n      setAuth({\n        isAuthenticated: storedAuth.isAuthenticated,\n        userType: storedAuth.userType,\n      });\n    } else {\n      // إعادة تعيين الحالة إذا لم تكن البيانات موجودة\n      setAuth({ isAuthenticated: false, userType: null });\n    }\n  }, [setAuth]);\n\n  return null; // هذا المكون لا يحتاج إلى عرض أي شيء\n};\n\nexport default RefrshHandler;\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,SAAS,QAAQ,OAAO;AAEjC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACrCH,SAAS,CAAC,MAAM;IACd;IACA,MAAMI,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAE3D,IAAIJ,UAAU,IAAIA,UAAU,CAACK,eAAe,EAAE;MAC5C;MACAP,OAAO,CAAC;QACNO,eAAe,EAAEL,UAAU,CAACK,eAAe;QAC3CC,QAAQ,EAAEN,UAAU,CAACM;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAR,OAAO,CAAC;QAAEO,eAAe,EAAE,KAAK;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IACrD;EACF,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;EAEb,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACC,EAAA,CAlBIF,aAAa;AAAAU,EAAA,GAAbV,aAAa;AAoBnB,eAAeA,aAAa;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}