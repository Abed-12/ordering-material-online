{"ast":null,"code":"var _jsxFileName = \"D:\\\\A.L\\\\\\u0645\\u0648\\u0627\\u062F \\u062C\\u0627\\u0645\\u0639\\u0629\\\\Project\\\\Project(A)\\\\Code\\\\login-admin\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport { useState } from 'react';\nimport RefrshHandler from './RefrshHandler'; // مكتبة لازمة للتنقل بين الصفحات\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // لادارة التنقل بين الصفحات\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // ام لا authenticated تستخدم لتحديد اذا كان المستخدم تحقق ، false في البداية تكون الحالة\n  // login المرسل اليه ،اذا لم يكن كذلك فانه يوجه المستخدم الىelement فانه يعرض ال true اذا كان : isAuthenticated يتحقق اذا كان المساحدم\n  const PrivateRoute = ({\n    element\n  }) => {\n    return isAuthenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 40\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(RefrshHandler, {\n      setIsAuthenticated: setIsAuthenticated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(PrivateRoute, {\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navigate","Route","Routes","Login","Home","useState","RefrshHandler","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","PrivateRoute","element","to","fileName","_jsxFileName","lineNumber","columnNumber","className","children","path","_c","$RefreshReg$"],"sources":["D:/A.L/مواد جامعة/Project/Project(A)/Code/login-admin/frontend/src/App.js"],"sourcesContent":["import { Navigate, Route, Routes } from \"react-router-dom\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport { useState } from 'react';\nimport RefrshHandler from './RefrshHandler'; // مكتبة لازمة للتنقل بين الصفحات\n\nfunction App() {\n  // لادارة التنقل بين الصفحات\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // ام لا authenticated تستخدم لتحديد اذا كان المستخدم تحقق ، false في البداية تكون الحالة\n  // login المرسل اليه ،اذا لم يكن كذلك فانه يوجه المستخدم الىelement فانه يعرض ال true اذا كان : isAuthenticated يتحقق اذا كان المساحدم\n  const PrivateRoute = ({ element }) => {\n    return isAuthenticated ? element : <Navigate to=\"/login\" /> \n  }\n\n  return (\n    <div className=\"App\">\n      {/* useState يتعامل مع تحديث الحاله */}\n      <RefrshHandler setIsAuthenticated={setIsAuthenticated} />\n       {/* هو عنصر يستخدم لتجميع جميع المسارات  */}\n      <Routes> \n        {/* \n        شرح App.js and RefrshHandler.js\n        \n        \n        بالطبع! سأقوم بشرح محتويات كل من App.js و RefrshHandler.js.\n        \n        1. App.js\n        App.js هو الملف الرئيسي لتطبيق React، حيث يتم إدارة التنقل بين الصفحات وتحديد ما إذا كان المستخدم قد تم التحقق من هويته (authenticated) أم لا. إليك شرح تفصيلي لأجزائه:\n        \n        استيراد المكتبات والمكونات:\n        \n        javascript\n        Insert Code\n        Edit\n        Copy code\n        import { Navigate, Route, Routes } from \"react-router-dom\";\n        import Login from \"./pages/Login\";\n        import Home from \"./pages/Home\";\n        import { useState } from 'react';\n        import RefrshHandler from './RefrshHandler';\n        هنا يتم استيراد المكتبات اللازمة للتنقل بين الصفحات (react-router-dom) بالإضافة إلى مكونات Login و Home، وأيضًا RefrshHandler الذي سنناقشه لاحقًا.\n        \n        إدارة حالة التحقق من الهوية:\n        \n        javascript\n        Insert Code\n        Edit\n        Copy code\n        const [isAuthenticated, setIsAuthenticated] = useState(false);\n        يتم استخدام useState لتحديد ما إذا كان المستخدم قد تم التحقق من هويته. في البداية، تكون الحالة false مما يعني أن المستخدم غير موثوق به.\n        \n        مكون PrivateRoute:\n        \n        javascript\n        Insert Code\n        Edit\n        Copy code\n        const PrivateRoute = ({ element }) => {\n          return isAuthenticated ? element : <Navigate to=\"/login\" />\n        }\n        هذا المكون يتحقق مما إذا كان المستخدم موثوقًا به. إذا كان isAuthenticated صحيحًا، فإنه يعرض العنصر المرسل إليه (مثل Home)، وإذا لم يكن كذلك، فإنه يعيد توجيه المستخدم إلى صفحة تسجيل الدخول.\n        \n        هيكل التطبيق:\n        \n        javascript\n        Insert Code\n        Edit\n        Copy code\n        return (\n          <div className=\"App\">\n            <RefrshHandler setIsAuthenticated={setIsAuthenticated} />\n            <Routes>\n              <Route path=\"/\" element={<Navigate to=\"/login\" />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/home\" element={<PrivateRoute element={<Home />} />} />\n            </Routes>\n          </div>\n        );\n        في هذا الجزء، يتم عرض مكون RefrshHandler الذي قد يتعامل مع تحديث حالة التحقق من الهوية. بعد ذلك، يتم تحديد المسارات باستخدام Routes و Route.\n        \n        عند زيارة المسار الجذر (/)، يتم إعادة توجيه المستخدم إلى صفحة تسجيل الدخول.\n        \n          هو عنصر يمثل مسارًا واحدًا في التطبيق. يحتوي على خاصيتين رئيسيتين\n          - path: هو العنصر الذي يحدد المسار الذي سيتم توجيه إليه\n          - element: هو العنصر الذي سيتم عرضه عند الوصول إلى المسار\n        */}\n        <Route path=\"/\" element={<Navigate to=\"/login\" />} /> {/* login page انه عند مطابقة المسار سيتم تحويلك الى  */} \n        <Route path=\"/login\" element={<Login />} /> \n        <Route path=\"/home\" element={<PrivateRoute element={<Home />} />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AAC1D,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,IAAI,MAAM,cAAc;AAC/B,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/D;EACA,MAAMQ,YAAY,GAAGA,CAAC;IAAEC;EAAQ,CAAC,KAAK;IACpC,OAAOH,eAAe,GAAGG,OAAO,gBAAGN,OAAA,CAACR,QAAQ;MAACe,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7D,CAAC;EAED,oBACEX,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAElBb,OAAA,CAACF,aAAa;MAACM,kBAAkB,EAAEA;IAAmB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEzDX,OAAA,CAACN,MAAM;MAAAmB,QAAA,gBAmELb,OAAA,CAACP,KAAK;QAACqB,IAAI,EAAC,GAAG;QAACR,OAAO,eAAEN,OAAA,CAACR,QAAQ;UAACe,EAAE,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,eACtDX,OAAA,CAACP,KAAK;QAACqB,IAAI,EAAC,QAAQ;QAACR,OAAO,eAAEN,OAAA,CAACL,KAAK;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3CX,OAAA,CAACP,KAAK;QAACqB,IAAI,EAAC,OAAO;QAACR,OAAO,eAAEN,OAAA,CAACK,YAAY;UAACC,OAAO,eAAEN,OAAA,CAACJ,IAAI;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACT,EAAA,CAtFQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAwFZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}